from sqlalchemy import Column, Integer, String, Float, DateTime, Enum, JSON, ForeignKey, Boolean, Text
from sqlalchemy.dialects.mysql import LONGBLOB, LONGTEXT
from sqlalchemy.orm import relationship
from app.database import Base
from datetime import datetime
from enum import Enum as PyEnum
class User(Base):
    __tablename__ = 'users'
    
    user_id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, index=True)
    password = Column(String(255))
    email = Column(String(100), unique=True, index=True)
    is_active = Column(Boolean, default=True)
    role = Column(Enum('admin', 'student', 'customer', name='role_types'))
    created_at = Column(DateTime)
    image_url = Column(String(255), nullable=True)
    status = Column(Enum('online', 'offline', name='user_status'), default='offline')
    google_id = Column(String(255), nullable=True)
    last_active = Column(DateTime, nullable=True)
    is_vip = Column(Boolean, default=False)
    vip_expiry = Column(DateTime, nullable=True)
    exam_results = relationship("ExamResult", back_populates="user")
class VIPPackage(Base):
    __tablename__ = 'vip_packages'
    
    package_id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    duration_months = Column(Integer, nullable=False)
    price = Column(Float, nullable=False)
    description = Column(Text, nullable=True)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)

class VIPSubscription(Base):
    __tablename__ = 'vip_subscriptions'
    
    subscription_id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey('users.user_id'))
    package_id = Column(Integer, ForeignKey('vip_packages.package_id'))
    start_date = Column(DateTime, nullable=False)
    end_date = Column(DateTime, nullable=False)
    payment_status = Column(Enum('pending', 'completed', 'reject', name='payment_status_types'))
    created_at = Column(DateTime, default=datetime.utcnow)

    user = relationship("User")
    package = relationship("VIPPackage")

class PackageTransaction(Base):
    __tablename__ = 'package_transactions'
    
    transaction_id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey('users.user_id'))
    package_id = Column(Integer, ForeignKey('vip_packages.package_id'))
    subscription_id = Column(Integer, ForeignKey('vip_subscriptions.subscription_id'))
    amount = Column(Float, nullable=False)
    payment_method = Column(String(50))
    bank_transfer_image = Column(String(255), nullable=True)
    status = Column(Enum('pending', 'completed', 'reject', name='transaction_status_types'))
    created_at = Column(DateTime, default=datetime.utcnow)
    admin_note = Column(Text, nullable=True)
    user = relationship("User")
    package = relationship("VIPPackage")
    subscription = relationship("VIPSubscription")
class ExamAccessType(Base):
    __tablename__ = 'exam_access_types'
    
    exam_id = Column(Integer, ForeignKey('exams.exam_id'), primary_key=True)
    access_type = Column(Enum('no vip', 'vip', 'student', name='access_types'), primary_key=True)
    
    exam = relationship("Exam", back_populates="access_types")
class ExamResult(Base):
    __tablename__ = 'exam_results'
    
    result_id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey('users.user_id'))
    exam_id = Column(Integer, ForeignKey('exams.exam_id'))
    total_score = Column(Float)
    completion_date = Column(DateTime)
    section_scores = Column(JSON)

    user = relationship("User", back_populates="exam_results")
    exam = relationship("Exam", back_populates="exam_results")
    answers = relationship("StudentAnswer", back_populates="exam_result")

class StudentAnswer(Base):
    __tablename__ = 'student_answers'
    
    answer_id = Column(Integer, primary_key=True, index=True)
    result_id = Column(Integer, ForeignKey('exam_results.result_id'))
    question_id = Column(Integer, ForeignKey('questions.question_id'))
    student_answer = Column(Text)
    score = Column(Float)
    
    exam_result = relationship("ExamResult", back_populates="answers")
    question = relationship("Question", back_populates="student_answers")

class ListeningAnswer(Base):
    __tablename__ = 'listening_answers'
    
    answer_id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey('users.user_id'))
    exam_id = Column(Integer, ForeignKey('exams.exam_id'))
    question_id = Column(Integer, ForeignKey('questions.question_id'))
    student_answer = Column(Text)
    score = Column(Float)
    created_at = Column(DateTime)
    
    user = relationship("User")
    exam = relationship("Exam")
    question = relationship("Question", back_populates="listening_answers")

class Exam(Base):
    __tablename__ = 'exams'
    
    exam_id = Column(Integer, primary_key=True, index=True)
    title = Column(String(100))
    created_at = Column(DateTime)
    is_active = Column(Boolean, default=True)
    created_by = Column(Integer, ForeignKey('users.user_id'))
    access_types = relationship("ExamAccessType", back_populates="exam")
    exam_results = relationship("ExamResult", back_populates="exam")
    exam_sections = relationship("ExamSection", back_populates="exam")
   
class ExamSection(Base):
    __tablename__ = 'exam_sections'
    
    section_id = Column(Integer, primary_key=True, index=True)
    exam_id = Column(Integer, ForeignKey('exams.exam_id'))
    section_type = Column(String(255))
    duration = Column(Integer)
    total_marks = Column(Float)
    order_number = Column(Integer)

    exam = relationship("Exam", back_populates="exam_sections")
    questions = relationship("Question", back_populates="section")

class QuestionGroup(Base):
    __tablename__ = 'question_groups'
    
    group_id = Column(Integer, primary_key=True, index=True)
    section_id = Column(Integer, ForeignKey('exam_sections.section_id'))
    instruction = Column(Text)
    question_range = Column(String(50))  # e.g., "1-6", "7-13"
    group_type = Column(String(50))  # e.g., "true_false_ng", "fill_blank"
    order_number = Column(Integer)
    
    # Add relationships
    section = relationship("ExamSection", backref="question_groups")
    questions = relationship("Question", back_populates="group")

class Question(Base):
    # Add these lines to your existing Question model
    group_id = Column(Integer, ForeignKey('question_groups.group_id'), nullable=True)
    question_number = Column(Integer)  # The question number within the test
    group = relationship("QuestionGroup", back_populates="questions")
    __tablename__ = 'questions'
    
    question_id = Column(Integer, primary_key=True, index=True)
    section_id = Column(Integer, ForeignKey('exam_sections.section_id'))
    group_id = Column(Integer, ForeignKey('question_groups.group_id'), nullable=True)
    question_type = Column(Text)
    question_text = Column(LONGTEXT)
    correct_answer = Column(Text)
    marks = Column(Integer, default=1)
    media_url = Column(String(255))
    additional_data = Column(JSON)
    question_number = Column(Integer)  # Add this to track the question number within the test

    section = relationship("ExamSection", back_populates="questions")
    group = relationship("QuestionGroup", back_populates="questions")
    options = relationship("QuestionOption", back_populates="question")
    student_answers = relationship("StudentAnswer", back_populates="question")
    listening_answers = relationship("ListeningAnswer", back_populates="question")  # Add this line
    
class QuestionOption(Base):
    __tablename__ = 'question_options'
    
    option_id = Column(Integer, primary_key=True, index=True)
    question_id = Column(Integer, ForeignKey('questions.question_id'))
    option_text = Column(Text)
    is_correct = Column(Boolean)

    question = relationship("Question", back_populates="options")

class SpeakingTopic(Base):
    __tablename__ = 'speaking_topics'
    
    topic_id = Column(Integer, primary_key=True, index=True)
    title = Column(String(100))
    description = Column(Text)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime)  # Add this line

    speaking_questions = relationship("SpeakingQuestion", back_populates="topic")


# Update SpeakingQuestion class
class SpeakingQuestion(Base):
    __tablename__ = 'speaking_questions'
    
    question_id = Column(Integer, primary_key=True, index=True)
    topic_id = Column(Integer, ForeignKey('speaking_topics.topic_id'))
    question_text = Column(Text, nullable=False)
    sample_answer = Column(Text, nullable=False)
    order_number = Column(Integer)
    part_type = Column(Enum('part1', 'part2', 'part3', name='speaking_part_types'))  # Remove the comma here
    created_at = Column(DateTime) 

    topic = relationship("SpeakingTopic", back_populates="speaking_questions")
    student_answers = relationship("SpeakingAnswer", back_populates="question")
    
class SpeakingAnswer(Base):
    __tablename__ = 'speaking_answers'
    
    answer_id = Column(Integer, primary_key=True, index=True)
    question_id = Column(Integer, ForeignKey('speaking_questions.question_id'))
    user_id = Column(Integer, ForeignKey('users.user_id'))
    answer_text = Column(Text, nullable=False)
    created_at = Column(DateTime)
    updated_at = Column(DateTime)

    question = relationship("SpeakingQuestion", back_populates="student_answers")
    user = relationship("User")


class WritingTask(Base):
    __tablename__ = 'writing_tasks'
    
    task_id = Column(Integer, primary_key=True, index=True)
    test_id = Column(Integer, ForeignKey('exams.exam_id'))
    part_number = Column(Integer)
    task_type = Column(Enum('essay', 'report', 'letter', name='task_types'))
    instructions = Column(LONGTEXT)  # Keep using LONGTEXT instead of Text
    word_limit = Column(Integer)
    total_marks = Column(Float)
    duration = Column(Integer)

    exam = relationship("Exam", backref="writing_tasks")
    student_answers = relationship("WritingAnswer", back_populates="task")

class WritingAnswer(Base):
    __tablename__ = 'writing_answers'
    
    answer_id = Column(Integer, primary_key=True, index=True)
    task_id = Column(Integer, ForeignKey('writing_tasks.task_id'))
    user_id = Column(Integer, ForeignKey('users.user_id'))
    answer_text = Column(LONGTEXT, nullable=False)
    score = Column(Float, nullable=True)
    is_ai_evaluated = Column(Boolean, default=False)
    created_at = Column(DateTime)
    updated_at = Column(DateTime)
    
    # Scores for each criterion
    task_achievement_score = Column(Float, nullable=True)
    coherence_cohesion_score = Column(Float, nullable=True)
    lexical_resource_score = Column(Float, nullable=True)
    grammatical_range_score = Column(Float, nullable=True)
    
    # New evaluation fields
    mistakes = Column(JSON, nullable=True)
    improvement_suggestions = Column(JSON, nullable=True)
    rewritten_essay = Column(LONGTEXT, nullable=True)

    task = relationship("WritingTask", back_populates="student_answers")
    user = relationship("User")


class ListeningMedia(Base):
    __tablename__ = "listening_media"

    media_id = Column(Integer, primary_key=True, index=True)
    section_id = Column(Integer, ForeignKey("exam_sections.section_id"))
    audio_file = Column(LONGBLOB)  # Changed to LONGBLOB for large files
    audio_filename = Column(String(255))
    transcript = Column(LONGTEXT)
    duration = Column(Integer)



class ReadingPassage(Base):
    __tablename__ = 'reading_passages'
    
    passage_id = Column(Integer, primary_key=True, index=True)
    section_id = Column(Integer, ForeignKey('exam_sections.section_id'))
    content = Column(Text)
    title = Column(String(100))
    word_count = Column(Integer)
